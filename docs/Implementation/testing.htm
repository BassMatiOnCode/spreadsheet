<!DOCTYPE html>
<html lang="en-US"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="template-info" file-name="empty.htm" version="2022-12-01" editor="USP" />
<meta name="author" content="USP" />
<meta name="creation-date" content="2023-02-03" />
<meta name="editor" content="USP" />
<meta name="change-date" content="2023-02-13" />
<meta name="version" content="1" />
<meta name="categories" content="Projects > JavaScript" />
<meta name="tags" content="project, JavaScript, HTML, spreadsheet, library, test" />
<meta name="description" content="This document outlines the testing strategy." />

<link rel="icon" type="image/png" href="/favicon.png" sizes="16x16" />
<link rel="stylesheet" href="/inc/page.css" />
<link rel="stylesheet" href="/inc/spreadsheet.css" />
<link rel="stylesheet" href="/site.css" />
<style>
</style>
 
<title>Projects - Spreadsheet - Testing Strategy</title>

</head><body><header id="page-header"><object data="title.svg" type="image/svg+xml"></object></header><div id="main-toolbar"></div><main id="page-content">

<h1>Testing Strategy</h1>

<p id="page-abstract"></p>

<p>Each test module is implemented in an own HTML document. All test documents are integrated into the test-root document in <tt>iframe</tt> elements.</p>

<p>When <tt>test-root.htm</tt> is loaded in a browser, the individual test modules start to run independently. When they finished their jobs, they call the <tt>report()</tt> function, defined in test-root. The report functions collects the information from the test modules, publishes them and creates a summary.</p>

<p>This way we always have alive status of the project.</p>

<p>Some test cases cannot be automated, because a user interaction is required. This for example applies to the functions of the browser File API, so import and export functionality must be tested manually.</p>

<h2>Module Import References</h2><div>

<p>Module filenames must reference a symbolic link and must not include a version number in the filename. The links point to the versioned spreadsheet module files. This method provides the ability to switch all test documents to a different version of the library. Additionally, this ensures that all test module use the same import module(s), which is important because modules containe shared global variables.</p>

<p>The links must be hard-links, because the browser Developer Tools seem to have problems writing changes to disk with symbolic links.</p>

</div>

</main><footer id="page-footer"></footer>
<script type="module" src="/inc/page.js" ></script>
<script type="module">
import * as spreadsheet from "/test/spreadsheet-core-0.js" ;
spreadsheet.initPage();
</script>
</body></html>