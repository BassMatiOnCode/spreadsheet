<!DOCTYPE html>
<html lang="en-US"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="template-info" file-name="empty.htm" version="2022-12-01" editor="USP" />
<meta name="author" content="USP" />
<meta name="creation-date" content="2023-02-15" />
<meta name="editor" content="USP" />
<meta name="change-date" content="2023-02-15" />
<meta name="version" content="1" />
<meta name="categories" content="Projects > JavaScript" />
<meta name="tags" content="project, JavaScript, HTML, spreadsheet, library" />
<meta name="description" content="<tt>Spreadsheet Interactive</tt> implements GUI functions." />

<link rel="icon" type="image/png" href="/favicon.png" sizes="16x16" />
<link rel="stylesheet" href="/inc/page.css" />
<link rel="stylesheet" href="/inc/spreadsheet.css" />
<link rel="stylesheet" href="/site.css" />
<link rel="stylesheet" href="../test/spreadsheet.css" />
 
<title>Projects - Spreadsheet Interactive</title>

</head><body><header id="page-header"><object data="title.svg" type="image/svg+xml"></object></header><div id="main-toolbar"></div><main id="page-content">

<h1>Spreadsheet Interactive</h1>

<p id="page-abstract"></p>

<h2 cbc>Cell Context Menu</h2><div>

<p>The spreadsheet cell context menu provides access to Spreadsheet Interactive functions, such as </p>

<ul>
<li>insert rows</li>
<li>delete rows</li>
<li>insert columns</li>
<li>delete columns</li>
<li>resize columns</li>
</ul>

<p>The context menu is implemented as <tt>dialog</tt> element:</p>

<figcaption class="listing">Context menu HTML code</figcaption>
<pre>
&lt;dialog id="cell-context" class="spreadsheet context"&gt;&lt;table&gt;
&lt;tr&gt;&lt;td&gt;Insert row&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;delete row&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Insert column&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;delete column&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/dialog&gt;
</pre>

<p>The dialog contains a table with context menu entries. Choosing a table opens a number of interesting design opportunities. When a table cell is left-clicked, the row and column index is placed in a dialog result variable. A click outside the dialog just closes the dialog without changint the result.</p>

<p>Some event handlers are registered in the <tt>pageInit()</tt> function:</p>

<figcaption class="listing">Setting up event handlers</figcaption>
<pre>
export function initSpreadsheet( sheet ) {
	if ( typeof sheet === "string" ) sheet = document.getElementById( sheet );
	<cc>// Add sheet event handlers</cc>
	sheet.addEventListener( "contextmenu", <hi>cellRightClickHandler</hi> );
	<cc>// Add cell context dialog event handlers</cc>
	const dialog = document.getElementById("cell-context");
	dialog.addEventListener( "click" , cellContextDialogClickHandler.bind( dialog ));
	dialog.addEventListener( "close", cellContextDialogCloseHandler.bind( dialog ));
	} ;
</pre>

<p>The dialog is opened by a right-click on a spreadsheet cell. The event handler initializes the result variable and positions the dialog to the mouse pointer position, then calls <tt>showModal()</tt> to open it:</p>

<figcaption class="listing">Opening the context dialog</figcaption>
<pre>
export const cellRightClickHandler = ( evt ) => {
	evt.preventDefault( );
	const dialog = document.getElementById("cell-context");
	dialog.dataset.result = "" ;
	dialog.style.marginLeft = `${evt.clientX}px` ;
	dialog.style.marginTop = `${evt.clientY}px` ;
	dialog.showModal( );
	} ;
</pre>

<p>If the dialog is open, all click events are routed to the dialog element. The HTML table inside the dialog element occupies the entire dialog client area. This can be used to set the dialog result and close the dialog:</p>

<figcaption class="listing">Closing the context dialog</figcaption>
<pre>
export const cellContextDialogClickHandler = function ( evt ) {
	if ( evt.target.tagName === "TD" ) 
		this.dataset.result = `${evt.target.parentElement.rowIndex},${evt.target.cellIndex}` ;
	this.close();
	} ;
</pre>

<p>If a table cell is clicked, the row and column index is stored in the dialog result attribute.</p>

<p>The dialog close event handler is used to execute the selected function:</p>

<figcaption class="listing">Executing the selcted function</figcaption>
<pre>
export const cellContextDialogCloseHandler = function( ) {
	switch ( <hi>this.dataset.result</hi> ) {
	case "0,0" :
		 console.log( "insert row" );
		 break;
	case "1,0" :
		 console.log( "delete row" );
		 break;
	case "2,0" :
		 console.log( "insert column" );
		 break;
	case "3,0" :
		 console.log( "delete column" );
		 break;
		 }
	} ;
	</pre>

<!--h2--></div>

<h2 cbc>Resizing Rows and Columns</h2><div>

<p>If a table cell has the style attributes <tt>overflow:hidden</tt> and <tt>resize:both</tt>, a small resizer icon is shown at the lower right corner of the cell. It can be used to drag the cell to the desired size with the mouse.</p>

<figcaption class="figure">Cell resizer</figcaption>
<img src="../img/fig-002.png" width="200" />

<p class="note">In many articles it is assumed that a <tt>resize</tt> style on a table cell has no effect and therefore a <tt>DIV</tt> element should be added to wrap the cell content. However, testing with Edge, I found <tt>resize</tt> on a table cell is working perfectly.</p>

<p>Grabbing the sizer with the left mouse button fires a mouse down event, followed by a mouse up event and a click event when the mouse button is released. The click event handler recognizes that a cell has been resized and bypasses the normal click event handler code in this case.</p>

<p>The resizer creates a style attribute on the cell with height and width properties:</p>

<figcaption class="listing">Resizer creates size attributes</figcaption>
<pre>
&lt;td data-col="0" <hi>style="width: 58px; height: 64px;"</hi> &gt;0,0&lt;/td&gt;
</pre>

<p>The widest cell in a column defines the column width. Similarly, the highest cell in a row defines the height of the row. This has the adverse effect that a row or column cannot be shrinked while there are other cells with size properties in that row or column.</p>

<p>For this reason, the mouse up event handler moves the width and height settings from the cell to the row and column elements (where the "column element" is actually the column label cell in the top column label row of the table.</p>

<p>Let's have a look at the mouse down event handler:</p>

<figcaption class="listing">Mouse down event handler</figcaption>
<pre>
export const mouseDownHandler = function ( evt ) {
	<cc>// Exit if the mouse did not go down on the sizer.</cc>
	if ( ! /(TD|TH)/.test( evt.target.tagName ) || evt.offsetX < evt.target.scrollWidth - 20 || evt.offsetY < evt.target.scrollHeight - 20 ) return ;
	<cc>// Record the cell being resized.</cc>
	cellResizing = evt.target;
</pre>

<p>A reference to the current cell is stored in in <tt>cellResizing</tt>. This helps to discern between a simple mouse click and a resize operation.</p>

<p>The next part moves row height and column size contraints to height and width style properties of the cell. This is a bit complicated, because only regular spreadsheet cells carry their logical column number in the <tt>data-col</tt> attribute. Similarly, the code must differentiate between row and column label cells:</p>

<figcaption class="listing">Moving row and column size contraints</figcaption>
<pre>
	<cc>// Move size constraints from row and column to cell</cc>
	if ( evt.target.hasAttribute( "data-col" )) {
		<cc>// Regular spreadsheet cell.</cc>
		evt.target.style.height = evt.target.parentElement.style.height;
		evt.target.parentElement.style.height = "" ;
		evt.target.style.width = this.rows[ 0 ].cells[ +evt.target.dataset.col + 1 ].style.width ;
		this.rows[ 0 ].cells[ +evt.target.dataset.col + 1 ].style.width = "" ;
		}
	else if ( evt.target.cellIndex === 0  ) {
		<cc>// Left row label cell.</cc>
		evt.target.style.height = evt.target.parentElement.style.height;
		evt.target.parentElement.style.height = "" ;
		evt.target.style.width = this.rows[ 0 ].firstElementChild.style.width ;
		this.rows[ 0 ].firstElementChild.style.width = "" ;
		}
	else if ( evt.target.cellIndex === evt.target.parentElement.cells.length - 1  ) {
		<cc>// Right row label cell.</cc>
		evt.target.style.height = evt.target.parentElement.style.height;
		evt.target.parentElement.style.height = "" ;
		evt.target.style.width = this.rows[ 0 ].lastElementChild.style.width ;
		this.rows[ 0 ].lastElementChild.style.width = "" ;
		}
	else if ( evt.target.parentElement.rowIndex === 0 ) {
		<cc>// Top column label cell.</cc>
		evt.target.style.height = evt.target.parentElement.style.height ;
		evt.target.parentElement.style.height = "" ;
		}
	else if ( evt.target.parentElement.rowIndex === this.rows.length - 1 ) {
		<cc>// Bottom column label cell.</cc>
		evt.target.style.height = evt.target.parentElement.style.height ;
		evt.target.parentElement.style.height = "" ;
		evt.target.style.width = this.rows[ 0 ].cells[ evt.target.cellIndex ].style.width ;
		this.rows[ 0 ].cells[ evt.target.cellIndex ].style.width = "" ;
		}
	} ;
</pre>

<p>Now, the cell is prepared for being resized.</p>

<p>Resizing is finished when the mouse button goes up. Its purpose is to move the size contraint from the cell to row and column elements. Again, we have to differentiate between regular spreadsheet cells and row or column label cells: </p>

<figcaption class="listing">Mouse up event handler</figcaption>
<pre>
export const mouseUpHandler = function ( evt ) {
	if ( ! cellResizing ) return ;
	<cc>// The cell has been resized.</cc>
	<cc>// Copy cell size info to left row and top column label cells.</cc>
	if ( evt.target.hasAttribute( "data-col" )) {
		<cc>// A regular spreadsheet cell has been resized.</cc>
		<cc>// We use the logical column number to find the correct column label cell in the first row of the table.</cc>
		this.rows[ 0 ].cells[ +evt.target.dataset.col + 1 ].style.width = evt.target.scrollWidth - 10  + "px" ;
		evt.target.parentElement.style.height = evt.target.scrollHeight + "px" ;
		evt.target.style.width = evt.target.style.height = "" ;
		}
	else if ( evt.target.cellIndex === 0 ) {
		<cc>// Left row label cell.</cc>
		this.rows[ 0 ].firstElementChild.style.width = evt.target.scrollWidth - 10  + "px" ;
		evt.target.style.width = "" ;
		evt.target.parentElement.style.height = evt.target.scrollHeight + "px" ;
		evt.target.style.height = "" ;
		}
	else if ( evt.target.cellIndex === evt.target.parentElement.cells.length - 1 ) {
		<cc>// Right row label cell.</cc>
		this.rows[ 0 ].lastElementChild.style.width = evt.target.scrollWidth - 10  + "px" ;
		evt.target.style.width = "" ;
		evt.target.parentElement.style.height = evt.target.scrollHeight + "px" ;
		evt.target.style.height = "" ;
		}
	else if ( evt.target.parentElement.rowIndex === 0 ) {
		<cc>// Top column label cell.</cc>
		evt.target.parentElement.style.height = evt.target.scrollHeight + "px" ;
		evt.target.style.height = "" ;
		}
	else if ( evt.target.parentElement.rowIndex === this.rows.length - 1 ) {
		<cc>// Bottom column label cell.</cc>
		evt.target.parentElement.style.height = evt.target.scrollHeight + "px" ;
		evt.target.style.height = "" ;
		this.rows[ 0 ].cells [ evt.target.cellIndex ].style.width = +evt.target.scrollWidth - 10 + "px" ;
		evt.target.style.width = "" ;
		}
	} ;
</pre>

<p>The last step of the procedure occurs in the left-click event handler:</p>

<figcaption class="listing">Left-click event handler</figcaption>
<pre>
export const cellLeftClickHandler = function ( evt ) {
	<cc>// A left-click following a resize event must be ignored.</cc>
	if ( cellResizing ) { 
		cellResizing = undefined; 
		return; 
		}
	...
	}
</pre>

<p>This prevents a cell from being selected by a resize operation.</p>

<h3 cbc>Context Dialog Controlled Procedure</h3><div>

<p>These styles are set with the <tt>resize</tt> attribute:</p>

<figcaption class="listing">Resizer style</figcaption>
<pre>
table.spreadsheet [resize] {
	overflow : hidden;
	<hi>resize : both</hi> ;
	}
</pre>

<p>Showing the resizer on every cell doesn't look pretty, so it is usually hidden. Currently, the context menu is used to show and hide the resizer. Alternatively, a :hover pseudoclass can be used.</p>

<p>While the cell has the <tt>resize</tt> attribute, the cell determines row and column size. When done, the row height and column width must be set to the cell size to make the adjustments permanent. Otherwise, the cell would collapse to its initial dimensions.</p>

<p>Similarly, when a cell is being preared for resizing, the row height and column width information must be deleted because otherwise they would prevent making the cell smaller.</p>

<p>In the first implementation attempt, the spreadsheet cell context menu was used to control cell resizing.</p>

<figcaption class="listing">Resize code</figcaption>
<pre>
cellContextDialogCloseHandler = function( ) {
	let table, row, col;
	[table, row, col] = [...this.dataset.context.split(",")];
	table = document.getElementById( table );
	const cell = table.rows[row].cells[col];
	if ( ! cell.hasAttribute( "resize" )) startResize( table, cell );
	else endResize( table, cell );
	cell.toggleAttribute( "resize" );
	} ;
</pre>

<p>The code checks the "resize" attribute of a table cell to discern between resize start and end.</p>

<figcaption class="listing">Begin resizing a cell</figcaption>
<pre>
export const startResize = (table, cell) => {
	<cc>// Stop other cells from resizing.</cc>
	table.querySelectorAll( "[resize]" ).forEach( cell => {
		endResize( table, cell );
		cell.removeAttribute( "resize" );
		} ) ;
	<cc>// Prevent cell from collapsing</cc>
	cell.style.height = cell.parentElement.style.height;
	cell.style.width = table.rows[ 0 ].cells[ +cell.dataset.col + 1 ].style.width ;
	<cc>// Clear the row and column size restrictions</cc>
	cell.parentElement.style.height = "" ;
	table.rows[ 0 ].cells[ +cell.dataset.col + 1 ].style.width = "" ;
	} ;
</pre>

<p>The code checks if there are other cells being resized. If so, their resize procedure is finished properly.</p>
<p>Row and column of the current call may have width and height attributes set. These are copied to the current cell to prevent it from collapsing to fit the content. Then the height and width attributes are removed from row and column to prevent them from defining a minimum cell size.</p>

<p>The sizer is now visible on the cell and can be dragged to the desired dimensions. When done, the user can invoke the <tt>resize</tt> cell context menu again. This time, <tt>endResize</tt> is called:</p>

<figcaption class="listing">Resize code</figcaption>
<pre>
endResize = (table, cell) => {
	<cc>// Make row height and column width permanent</cc>
	cell.parentElement.style.height = cell.scrollHeight + "px" ;
	table.rows[ 0 ].cells[ +cell.dataset.col + 1 ].style.width = cell.scrollWidth + "px";
	<cc>// Clear the cell size</cc>
	cell.style.height = cell.style.width = "" ;
	} ;
</pre>

<!--h3--></div>

<h3 cbc>:hover Controlled Cell Resizing</h3><div>

<p>A mouse hovering over a spreadsheet table cell can be used to activeate the cell resizer:</p>

<figcaption class="listing">:Hover and :active attributes control resizer visibility</figcaption>
<pre>
table.spreadsheet th:hover,
table.spreadsheet td:hover,
table.spreadsheet th:active,
table.spreadsheet td:active {
	overflow : hidden;
	resize : both ;	
	}
</pre>

<p>The <tt>:active</tt> pseudoclass has been added to improve stability with fast mouse moves, otherwise the resizer is "lost" quite frequently.</p>

<p>This works pretty well, but the resized cell gets <tt>width</tt> and <tt>height</tt> style properties set, which prevents the associated row and column to be shrinked below these values.</p>

<p>So we need to detect when a cell is being resized:</p>

<figcaption class="listing">Cell resize detection events</figcaption>
<pre>
export function initSpreadsheet( sheet ) {
	...
	sheet.addEventListener( "mousedown", mouseDownHandler.bind( sheet ));
	sheet.addEventListener( "mouseup", mouseUpHandler.bind( sheet ));
	...
	} ;
</pre>

<p>The code above registers mouse up and down event handlers. Both communicate through a status info object:</p>

<figcaption class="listing">cellSizeInfo object is used to detect resized cells</figcaption>
<pre>
const cellSizeInfo = {
	cell : undefined,	<cc>// cell at mouse down</cc>
	cellW : 0,		<cc>// cell width at mouse down</cc>
	cellH : 0		<cc>// cell height at mouse down</cc>
	} ;
</pre>

<p class="note">Width and height information may not be necessary, they are currently not tested.</p>

<p>This object is filled with data when a mouse down event appeared in the lower right corner of the cell:</p>

<figcaption class="listing">Detecting start of resizing</figcaption>
<pre>
export const mouseDownHandler = function ( evt ) {
	if ( /(TD|TH)/.test( evt.target.tagName ) && evt.offsetX > evt.target.scrollWidth - 20 && evt.offsetY > evt.target.scrollHeight - 20 ) {
		<cc>// A mouse button went down in the lower right corner of a table cell.</cc>
		console.log( "Resizing started" );
		cellSizeInfo.cell = evt.target;
		cellSizeInfo.cellW = evt.target.scrollWidth ;
		cellSizeInfo.cellH = evt.target.scrollHeight ;
		<cc>// Move size constraints from row and column to cell</cc>
		evt.target.style.height = evt.target.parentElement.style.height;
		evt.target.style.width = this.rows[ 0 ].cells[ +evt.target.dataset.col + 1 ].style.width ;
		<cc>// Clear the row and column size restrictions</cc>
		evt.target.parentElement.style.height = "" ;
		this.rows[ 0 ].cells[ +evt.target.dataset.col + 1 ].style.width = "" ;
		}
	else cellSizeInfo.cell = undefined;
	} ;
</pre>

<p>The mouse down event handler also removes the size contraints from the row and column elements, as seen in the previous section. While the cell sizer is dragged on the screen, the cell determines the size of the current row and column.</p>

<p>When the mouse goes up, the mouse up event handler kicks in: </p>

<figcaption class="listing">Detecting start of resizing</figcaption>
<pre>
export const mouseUpHandler = function ( evt ) {
	if ( cellSizeInfo.cell ) {
		<cc>// The cell has been resized.</cc>
		<cc>// Copy cell size info to row and column elements</cc>
		evt.target.parentElement.style.height = evt.target.scrollHeight + "px" ;
		this.rows[ 0 ].cells[ +evt.target.dataset.col + 1 ].style.width = evt.target.scrollWidth + "px" ;
		<cc>// Delete size info in cell</cc>
		evt.target.style.width = evt.target.style.height = "" ;
		}
	cellSizeInfo.cell = undefined;
	} ;
</pre>

<p>The code above moves the size restrictions from the cell to the row and column elements, then invalidates the cell reference in the <tt>cellSizeInfo</tt> object.</p>

<p>The sizer does work with touchscreen events, but in this case no mouse up and down events are fired. As a result, individual cells are sized, but size restrictions are not moved from the cell to row and column elements.</p>

<!--h3--></div>

<!--h2--></div>

<h2 cbc>Selecting Cells</h2><div>

<p>A left-click on a cell <em>selects</em> that cell and creates a selected cells range object which spans exactly one cell. A shift-click <em>expands</em> or <em>shrinks</em> that range.</p>

<p>The left-click interferes with resizing a cell. Resizing is started in the mouse down event handler and finished in the mouse up event handler. After the mouse up event, a mouse click event is fired &ndash; which must be ignored if the cell was actually resized. This is achieved by testing the <tt>cellSizeInfo.cell</tt>, which is set in the mouse down event handler if the mouse goes down on the cell sizer in the lower right corner. If the cell reference is set, the click follows a cell resize and therefore is ignored.</p>

<p>Note that the <tt>cellLeftClickHandler</tt> was bound to the spreadsheet table in <tt>initSpreadsheet()</tt>, so <tt>this</tt> refers conveniently to the HTML TABLE element.</p>

<figcaption class="listing">Selecting Cells</figcaption>
<pre>
export const cellLeftClickHandler = function ( evt ) {
	<cc>// A left-click following a resize event must be ignored.</cc>
	if ( cellSizeInfo.cell ) { cellSizeInfo.cell = undefined; return; }
	<cc>// Make sure that we are working on a cell and not some child element.</cc>
	let cell = evt.target;
	while ( cell && cell.tagName !== "TD" && cell.tagName !== "TH" ) cell = cell.parentElement;
	if ( ! cell ) return; // Just in case...
	<cc>// Prevent the browser from selecting text across cells.</cc>
	evt.preventDefault( );
	evt.stopPropagation( );
	<cc>// Call the appropriate selection function.</cc>
	selectCells( this, cell, evt.shiftKey );
	} ;
</pre>

<p>At the bottom, the selection function is called:</p>

<figcaption class="listing">Cell range selection</figcaption>
<pre>
export const selectCells = function ( table, cell, extend ) {
	const row = cell.parentElement ;
	let r1, r2, c1, c2 ;
	const range = selectedRanges[ table.id ] ;
	if ( ! extend ) {
		<cc>// Deselect cells of the existing range.</cc>
		if ( range ) range.toggleAttribute();
		<cc>// Calculate row and column indices.</cc>
		if ( row.rowIndex === 0 || row.rowIndex === table.rows.length - 1) { 
			r1 = 1 ; 
			r2 = table.rows.length - 2 ; 
			c1 = c2 = cell.cellIndex;
			}
		else if ( cell.cellIndex === 0 || cell.cellIndex === row.cells.length - 1) { 
			c1 = 1 ; 
			c2 = row.cells.length - 2 
			r1 = r2 = row.rowIndex ;
			}
		else {
			c1 = c2 = +cell.dataset.col + 1 ;
			r1 = r2 = row.rowIndex;
		}
		<cc>// Create a new selected range.</cc>
		selectedRanges[ table.id ] = new CellRange( table.id, r1, c1, r2, c2 );
		}
</pre>

<p>A left-click with no shift creates a new selection range. Row and column indices are calculated based on the type of cell, row label, column label or regular spreadsheet cell. The <tt>CellRange</tt> constructor stores the coordinates and cares for setting the "selected" attribute on the cells.</p>

<p>A shift-click extends an existing selection range:</p>

<figcaption class="listing">Cell range selection</figcaption>
<pre>
	else {
		<cc>// Exit if no range</cc>
		if ( ! range ) return ;  
		<cc>// Calculate indices</cc>
		if ( row.rowIndex === 0 ) { r2 = table.rows.length - 2 ; c2 = cell.cellIndex } 
		else if ( row.rowIndex === table.rows.length - 1 ) { r2 = 1; c2 = cell.cellIndex }
		else if ( cell.cellIndex === 0 ) { r2 = row.rowIndex ; c2 = row.cells.length - 2 }
		else if ( cell.cellIndex === row.cells.length - 1 ) {r2 = row.rowIndex ; c2 = 1 }
		else { r2 = row.rowIndex ; c2 = +cell.dataset.col + 1 } 
		<cc>// Extend existing range.</cc>
		range.extend( r2, c2 );
		}
	} ;
</pre>

<p>Again, the row and column indices are calculated according to the cell type, the the <tt>range.extend()</tt> method takes care of the rest.</p>

<!--h2--></div>


</main><footer id="page-footer"></footer>
<script type="module" src="/inc/page.js" ></script>
<script type="module">
import * as spreadsheet from "/test/spreadsheet-core-0.js" ;
spreadsheet.initPage();
</script>
</body></html>