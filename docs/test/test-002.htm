<!DOCTYPE html>
<html lang="en-US"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="template-info" file-name="empty.htm" version="2022-12-01" editor="USP" />
<meta name="author" content="USP" />
<meta name="creation-date" content="2023-01-20" />
<meta name="editor" content="USP" />
<meta name="change-date" content="2023-01-20" />
<meta name="version" content="1" />
<meta name="categories" content="Projects > JavaScript" />
<meta name="tags" content="project, JavaScript, HTML, spreadsheet, library, require" />
<meta name="description" content="Initial test." />

<link rel="icon" type="image/png" href="/favicon.png" sizes="16x16" />
<link rel="stylesheet" href="/inc/page.css" />
<link rel="stylesheet" href="/site.css" />
<link rel="stylesheet" href="./spreadsheet.css" />
<link rel="stylesheet" href="./test.css" />

<title>Projects - Spreadsheet - Test 2</title>

</head><body>

<h1>Test <span id="test-number">2</span> - <span id="test-title">Cell Addressing</span> </h1>

<p>Status: <span id="status">pending</span>.
<br/>Result: <span id="result" value="undefined"></span>
<br/><span id="tests">0</span> tests <span id="errors">0</span> errors</p>

<table id="sheet-1" class="spreadsheet" labels="generate,both"><tbody><tr data-row="0">
	<td data-col="0" xpr="123">0,0</td>
	<td data-col="1" name="n-0,1">0,1</td>
	<td data-col="2">0,2</td>
	<td data-col="3">0,3</td>
</tr><tr data-row="1">
	<td data-col="0">1,0</td>
	<td data-col="1" rowspan="2" colspan="2" name="n-1,1">1,1</td>
	<td data-col="3">1,3</td>
</tr><tr data-row="2">
	<td data-col="0">2,0</td>
	<td data-col="3" name="n-2,3">2,3</td>
</tr><tr data-row="3">
	<td data-col="0">3,0</td>
	<td data-col="1" name="n-3,1">3,1</td>
	<td data-col="2">3,2</td>
	<td data-col="3">3,3</td>
</tr></tbody></table>

<script type="module">
document.getElementById( "status" ).innerText = "started" ;
import { report, check, publishResults } from "./test.js" ;

import * as spreadsheet from './spreadsheet-core.js';
spreadsheet.initSpreadsheet( document.getElementById( "sheet-1" ));
spreadsheet.setCurrentSheet(  document.getElementById("sheet-1"));

	// Test 2.1 - cell() function, absolute addressing
	// cell(row,col) must match row,col
check( "2.1", "0,0", spreadsheet.cell(0,0), "cell() function call failed, " );
check( "2.1", "0,1", spreadsheet.cell(0,1), "cell() function call failed, " );
check( "2.1", "0,2", spreadsheet.cell(0,2), "cell() function call failed, " );
check( "2.1", "0,3", spreadsheet.cell(0,3), "cell() function call failed, " );
check( "2.1", "1,0", spreadsheet.cell(1,0), "cell() function call failed, " );
check( "2.1", "1,1", spreadsheet.cell(1,1), "cell() function call failed, " );
check( "2.1", null, spreadsheet.cellObject(1,2), "cell() function call failed, " );
check( "2.1", "1,3", spreadsheet.cell(1,3), "cell() function call failed, " );
check( "2.1", "2,0", spreadsheet.cell(2,0), "cell() function call failed, " );
check( "2.1", null, spreadsheet.cellObject(2,1), "cell() function call failed, " );
check( "2.1", null, spreadsheet.cellObject(2,2), "cell() function call failed, " );
check( "2.1", "2,3", spreadsheet.cell(2,3), "cell() function call failed, " );
check( "2.1", "3,0", spreadsheet.cell(3,0), "cell() function call failed, " );
check( "2.1", "3,1", spreadsheet.cell(3,1), "cell() function call failed, " );
check( "2.1", "3,2", spreadsheet.cell(3,2), "cell() function call failed, " );
check( "2.1", "3,3", spreadsheet.cell(3,3), "cell() function call failed, " );

// Test 2.2 Relative addressing
// Verifies the or() function.
spreadsheet.setCurrentCell(spreadsheet.cellObject(0,0));
check( "2.2", 1, spreadsheet.or(1), "or() function call failed" );
check( "2.2", 0, spreadsheet.or(0), "or() function call failed" );
check( "2.2", -1, spreadsheet.or(-1), "or() function call failed" );
	
spreadsheet.setCurrentCell(spreadsheet.cellObject(2,0)) ;
check( "2.2", 1, spreadsheet.or(-1), "or() function call failed" );
check( "2.2", 2, spreadsheet.or(0), "or() function call failed" );
check( "2.2", 3, spreadsheet.or(1), "or() function call failed" );

	// Test 2.3 Relative addressing
	// Verifies the oc() function.
spreadsheet.setCurrentCell(spreadsheet.cellObject(0,0)) ;
check( "2.3", 1, spreadsheet.oc(1), "oc() function call failed" );
check( "2.3", 0, spreadsheet.oc(0), "oc() function call failed" );
check( "2.3", -1, spreadsheet.oc(-1), "oc() function call failed" );
	
spreadsheet.setCurrentCell(spreadsheet.cellObject(0,2)) ;
check( "2.3", 1, spreadsheet.oc(-1), "oc() function call failed" );
check( "2.3", 2, spreadsheet.oc(0), "oc() function call failed" );
check( "2.3", 3, spreadsheet.oc(1), "oc() function call failed" );

	// Test 2.4 - cell() function with relative addressing
	// cell(row,col) must match row,col
spreadsheet.setCurrentCell(spreadsheet.cellObject(1,3)) ;

check( "2.4", "0,0", spreadsheet.cell(spreadsheet.or(-1),spreadsheet.oc(-3)), "cell() function with relative addressing failed" );
check( "2.4", "0,1", spreadsheet.cell(spreadsheet.or(-1),spreadsheet.oc(-2)), "cell() function with relative addressing failed" );
check( "2.4", "0,2", spreadsheet.cell(spreadsheet.or(-1),spreadsheet.oc(-1)), "cell() function with relative addressing failed" );
check( "2.4", "0,3", spreadsheet.cell(spreadsheet.or(-1),spreadsheet.oc(0)), "cell() function with relative addressing failed" );

check( "2.4", "1,0", spreadsheet.cell(spreadsheet.or(0),spreadsheet.oc(-3)), "cell() function with relative addressing failed" );
check( "2.4", "1,1", spreadsheet.cell(spreadsheet.or(0),spreadsheet.oc(-2)), "cell() function with relative addressing failed" );
check( "2.4", null, spreadsheet.cellObject(spreadsheet.or(0),spreadsheet.oc(-1)), "cell() function with relative addressing failed" );
check( "2.4", "1,3", spreadsheet.cell(spreadsheet.or(0),spreadsheet.oc(0)), "cell() function with relative addressing failed" );

check( "2.4", "2,0", spreadsheet.cell(spreadsheet.or(1),spreadsheet.oc(-3)), "cell() function with relative addressing failed" );
check( "2.4", null, spreadsheet.cellObject(spreadsheet.or(1),spreadsheet.oc(-2)), "cell() function with relative addressing failed" );
check( "2.4", null, spreadsheet.cellObject(spreadsheet.or(1),spreadsheet.oc(-1)), "cell() function with relative addressing failed" );
check( "2.4", "2,3", spreadsheet.cell(spreadsheet.or(1),spreadsheet.oc(0)), "cell() function with relative addressing failed" );

check( "2.4", "3,0", spreadsheet.cell(spreadsheet.or(2),spreadsheet.oc(-3)), "cell() function with relative addressing failed" );
check( "2.4", "3,1", spreadsheet.cell(spreadsheet.or(2),spreadsheet.oc(-2)), "cell() function with relative addressing failed" );
check( "2.4", "3,2", spreadsheet.cell(spreadsheet.or(2),spreadsheet.oc(-1)), "cell() function with relative addressing failed" );
check( "2.4", "3,3", spreadsheet.cell(spreadsheet.or(2),spreadsheet.oc(0)), "cell() function with relative addressing failed" );

	// Test 2.5 - Addressing named cells with the cell() function
check( "2.5", "0,1", spreadsheet.namedCellValue("n-0,1"), "cell() function with relative addressing failed" );
check( "2.5", "1,1", spreadsheet.namedCellValue("n-1,1"), "cell() function with relative addressing failed" );
check( "2.5", "2,3", spreadsheet.namedCellValue("n-2,3"), "cell() function with relative addressing failed" );
check( "2.5", "3,1", spreadsheet.namedCellValue("n-3,1"), "cell() function with relative addressing failed" );
	
	// done
publishResults();

</script></body></html>