<!DOCTYPE html>
<html lang="en-US"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="template-info" file-name="empty.htm" version="2022-12-01" editor="USP" />
<meta name="author" content="USP" />
<meta name="creation-date" content="2023-01-30" />
<meta name="editor" content="USP" />
<meta name="change-date" content="2023-02-09" />
<meta name="version" content="1" />
<meta name="categories" content="Projects > JavaScript" />
<meta name="tags" content="project, JavaScript, HTML, spreadsheet, library" />
<meta name="description" content="This page gets you started with spreadsheet.js. From simple to complex." />

<link rel="icon" type="image/png" href="/favicon.png" sizes="16x16" />
<link rel="stylesheet" href="/inc/page.css" />
<link rel="stylesheet" href="/site.css" />
<link rel="stylesheet" href="./test/spreadsheet.css" />
<style>
</style>
 
<title>Projects - Spreadsheet.js - Getting Started</title>

</head><body><header id="page-header"><object data="title.svg" type="image/svg+xml"></object></header><div id="main-toolbar"></div><main id="page-content">

<h1>Getting Started with Spreadsheet.js</h1>

<p id="page-abstract"></p>

<h2 cbc>Prerequisite: A Tiny Web Server</h2><div>

<p>The browser only accepts JavaScript modules if they are served over the http:// or https:// protocols. The file:// protocol is not accepted because of security reasons. </p>

<p>So we need a webserver. I recommend a tiny one, like <a href=""></a>Deno, the successor to Node.js. It is lightweight, secure, and supports Typescript out-of-the-box.</p>

<p>I have written an article about Deno, but here is a shortform intallation instruction:</p>

<p>Download and extract the precompiled package from <a href="https://github.com/denoland/deno/releases">https://github.com/denoland/deno/releases</a> to a suitable folder on your machine and add that folder to your path environment. For Windows, it is "deno-x86_64-pc-windows-msvc.zip" package.</p>

<p>Then open a console window, navigate to the HTML folder and execute the following command:</p>

<figcaption class="listing">Installing the File_Server script</figcaption>
<pre>deno install --allow-net --allow-read https://deno.land/std@0.167.0/http/file_server.ts</pre>

<p>This will download, compile and start a tiny file server, with the current folder as www root.</p>

<p>Hereafter, you will only have to invoke the script:</p>

<figcaption class="listing">Invoking the compiled script</figcaption>
<pre>deno file_server.ts</pre>

<p>Note that the server listens on port 4507 by default, so the address in the browser must be something like "localhost:4507/my-page.htm".</p>

<!--h2--></div>

<h2 cbc>A Calculator Spreadsheet</h2><div>

<p>This first example builds a simple calculator spreadsheet with a predefined structure, some input cells and some calculated cells.</p>

<p>To follow along, you can download <a href="./test/demo-empty.htm">demo-empty.htm</a> and <a href="./test/spreadsheet-0.css">spreadsheet.css</a>, an empty spreadsheet template and the spreadsheet stylesheet. Open the HTML file in a text editor. Windows Notepad for example.</p>

<h3 cbc>Step 1: Create the HTML Table</h3><div>

<p>Create a <tt>&lt;table&gt;&lt;/table&gt;</tt> element. The table must have "spreadsheet" in the class attribute in order to be recognized by spreadsheet-core. Other class names can be added to override default appearance in CSS.</p>

<p>Then add more elements as shown below: The <tt>tbody</tt> element contains rows (<tt>tr</tt>), a row contains table header (<tt>th</tt>) and table data (<tt>td</tt>) elements. These are also called "table cells":</p>

<figcaption class="listing">The HTML table code</figcaption>
<pre>
&lt;table class="spreadsheet"&gt;
&lt;tbody&gt;&lt;tr&gt;
	&lt;th colspan="2"&gt;Circle&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;
	&lt;td&gt;Radius?&lt;/td&gt;
	&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
	&lt;td&gt;Diameter&lt;/td&gt;
	&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
	&lt;td&gt;Area&lt;/td&gt;
	&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;
&lt;/table&gt;
</pre>

<p>And here is the result:</p>

<table id="sheet-1">
<tbody><tr>
	<th colspan="2">Circle</th>
</tr><tr>
	<td>Radius?</td>
	<td>1</td>
</tr><tr>
	<td>Diameter</td>
	<td></td>
</tr><tr>
	<td>Area</td>
	<td></td>
</tr></tbody>
</table>

<p>An ordinary HTML table. Nothing to get excited about.</p>

<!--h3--></div>

<h3 cbc>Step 2 - Integrate spreadsheet.css</h3><div>

<p>Now download <a href="./test/spreadsheet.css">spreadsheet.css</a> and store it in the HTML folder. The CSS file defines the default appearance of a spreadsheet table. Many aspects and be modified or overwritten in you own stylesheets. To integrate it, add the following element to the document <tt>head</tt>:</p>

<figcaption class="listing">Adding the Stylesheet</figcaption>
<pre>
&lt;head&gt;
	...
&lt;<hi>link</hi> rel="stylesheet" href="<hi>spreadsheet.css</hi>" /&gt;
&lt;/head&gt;
</pre>

<p>If you then reload the document, the table <em>disappears</em>. Strange at first sight, but there is a reason for that:</p>

<p class="box">Every spreadsheet table must have row and column label cells at top, bottom, left and right sides.</p>

<p>We have only two cells in each row, they are both considered to be row labels. And by default, label cells are invisible. So let's add the labels:</p>

<figcaption class="listing">Manually added labels</figcaption>
<pre>
&lt;table class="spreadsheet" <hi>labels="all"</hi> &gt;
<hi>&lt;tr&gt; <cc>&lt;!-- Upper column labels row --&gt;</cc>
	&lt;td&gt;&lt;/td&gt;
	&lt;td&gt;0&lt;/td&gt;
	&lt;td&gt;1&lt;/td&gt;
	&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;</hi>&lt;tr&gt;
	<hi>&lt;td&gt;0&lt;/td&gt;</hi> <cc>&lt;!-- Left row label cell --&gt;</cc>
	&lt;th colspan="2"&gt;Circle&lt;/th&gt;
	<hi>&lt;td&gt;0&lt;/td&gt;</hi> <cc>&lt;!-- Right row label cell --&gt;</cc>
&lt;/tr&gt;&lt;tr&gt;
	<hi>&lt;td&gt;1&lt;/td&gt;</hi> <cc>&lt;!-- Left row label cell --&gt;</cc>
	&lt;td&gt;Radius?&lt;/td&gt;
	&lt;td&gt;1&lt;/td&gt;
	<hi>&lt;td&gt;1&lt;/td&gt;</hi> <cc>&lt;!-- Right row label cell --&gt;</cc>
&lt;/tr&gt;&lt;tr&gt;
	<hi>&lt;td&gt;2&lt;/td&gt;</hi> <cc>&lt;!-- Left row label cell --&gt;</cc>
	&lt;td&gt;Diameter&lt;/td&gt;
	&lt;td&gt;&lt;/td&gt;
	<hi>&lt;td&gt;2&lt;/td&gt;</hi> <cc>&lt;!-- Right row label cell --&gt;</cc>
&lt;/tr&gt;&lt;tr&gt;
	<hi>&lt;td&gt;3&lt;/td&gt;</hi> <cc>&lt;!-- Left row label cell --&gt;</cc>
	&lt;td&gt;Area&lt;/td&gt;
	&lt;td&gt;&lt;/td&gt;
	<hi>&lt;td&gt;3&lt;/td&gt;</hi> <cc>&lt;!-- Right row label cell --&gt;</cc>
&lt;/tr&gt;&lt;tr&gt; <cc>&lt;!-- Lower column labels row --&gt;</cc>
	<hi>&lt;td&gt;&lt;/td&gt;</hi>
	&lt;td&gt;0&lt;/td&gt;
	&lt;td&gt;1&lt;/td&gt;
	<hi>&lt;td&gt;&lt;/td&gt;</hi>
&lt;/tr&gt;
&lt;/table&gt;
</pre>

<p>Don't forget to add the <tt>labels</tt> attribute as shown above, which controls the visibility of labels.</p>

<p>Label cells carry the logical row and column addresses, starting from zero. They are highlighted in the code above. Tedious work with much potential for mistakes. Fortunately, <tt>spreadsheet-core.js</tt> provides code to <em>generate label cells</em>, as we will see soon.</p>

<p>Now we should have a spreadsheet table again:</p>
<figcaption class="table">The spreadsheet table with label cells</figcaption>
<table id="sheet-2" class="spreadsheet" labels="all">
<tr>
	<td></td>
	<td>0</td>
	<td>1</td>
	<td></td>
</tr><tr>
	<td>0</td>
	<th colspan="2">Circle</th>
	<td>0</td>
</tr><tr>
	<td>1</td>
	<td>Radius?</td>
	<td>1</td>
	<td>1</td>
</tr><tr>
	<td>2</td>
	<td>Diameter</td>
	<td></td>
	<td>2</td>
</tr><tr>
	<td>3</td>
	<td>Area</td>
	<td></td>
	<td>3</td>
</tr><tr>
	<td></td>
	<td>0</td>
	<td>1</td>
	<td></td>
</tr>
</table>

<p>Label cells at the right and the bottom are quite uncommon, but might be useful for writing expressions with cell references. More details on how to control visibility in step 4.</p>

<!--h3--></div>

<h3 cbc>Step 3 - Integrate spreadsheet-core.js</h3><div>

<p>Now download <a href="/test/spreadsheet-core-0.js">spreadsheet-core.js</a> and <a href="/test/spreadsheet-utility-0.js">spreadsheet-utility.js</a> and save them in the HTML directory. The code in the spreadsheet-core module will do the heavy lifting for us. To use it, add the following code to the end of the HTML file:</p>

<figcaption class="listing">Integrating spreadsheet-core.js</figcaption>
<pre>
&lt;script type="module"&gt;
import * as spreadsheet from "./spreadsheet-core-0.js";
spreadsheet.initPage();
&lt;/script&gt;
</pre>

<p>If you now reload the document, you won't see a difference. But if you open the browser developer tools and inspect the document, you will notice that row (tr) and cell (td, th) elements have been decorated with <tt>data-row</tt> and <tt>data-col</tt> attributes &ndash; the <em>logical row and column addresses</em>.</p>

<p>These attributes are used in the cell refference functions, available to spreadsheet expressions.</p>

<!--h3--></div>

<h3 cbc>Step 4 - Row and Column Labels</h3><div>

<p>Every spreadsheet <em>must</em> have row and column labels at all four sides (but they may be hidden). This make the code simpler that deals with spreadsheet size. Row and column labels are hidden by default. To make them visible, add the <tt>labels</tt> attribute to the <tt>table</tt> element, and supply one of the following values: <tt>top</tt>, <tt>right</tt>, <tt>bottom</tt>, <tt>left</tt>, <tt>both</tt>, <tt>all</tt>.</p>

<figcaption class="listing">Showing labels</figcaption>
<pre>
&lt;table class="spreadsheet" <hi>labels="both"</hi>&gt;
</pre>

<p>This gets us the familiar spreadsheet appearance:</p>

<table id="sheet-3" class="spreadsheet" labels="both">
<tr>
	<td></td>
	<td>0</td>
	<td>1</td>
	<td></td>
</tr><tr>
	<td>0</td>
	<th colspan="2">Circle</th>
	<td>0</td>
</tr><tr>
	<td>1</td>
	<td>Radius?</td>
	<td>1</td>
	<td>1</td>
</tr><tr>
	<td>2</td>
	<td>Diameter</td>
	<td></td>
	<td>2</td>
</tr><tr>
	<td>3</td>
	<td>Area</td>
	<td></td>
	<td>3</td>
</tr><tr>
	<td></td>
	<td>0</td>
	<td>1</td>
	<td></td>
</tr>
</table>

<p>Not strictly necessary for calculator applications, but row and column labels might be a good idea while you write expressions with cell references. </p>

<p>As already mentioned, manually adding and maintaining row and column labels is a tedious task and bears many opportunities for mistakes. But <tt>spreadsheet core</tt> can <em>generate</em> them automatically. Just precede the <tt>labels</tt> attribute value with the string "generate,":</p>

<figcaption class="listing">Generated row and column labels</figcaption>
<pre>
&lt;table class="spreadsheet" labels="<hi>generate,</hi>both"&gt;
&lt;tr&gt;
	&lt;th colspan="2"&gt;Circle&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;
	&lt;td&gt;Radius?&lt;/td&gt;
	&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
	&lt;td&gt;Diameter&lt;/td&gt;
	&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
	&lt;td&gt;Area&lt;/td&gt;
	&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
</pre>

<p>Less effort, same result:</p>

<table id="sheet-4" class="spreadsheet" labels="generate,both">
<tr>
	<th colspan="2">Circle</th>
</tr><tr>
	<td>Radius?</td>
	<td>1</td>
</tr><tr>
	<td>Diameter</td>
	<td></td>
</tr><tr>
	<td>Area</td>
	<td></td>
</tr>
</table>

<!--h3--></div>

<h3 cbc>Step 5 - Adding Expressions</h3><div>

<p>To get automatically calculated cell values, we need to decorate cells with expressions (aka formulas). They are placed as strings in the <tt>data-xpr</tt> attributes and are regular JavaScript.</p>

<p>Our simple calculator will calculate diameter and radius of a circle, so we will implement the appropriate expressions:</p>

<figcaption class="listing">Adding expressions:</figcaption>
<pre>
	&lt;td&gt;Diameter&lt;/td&gt;
	&lt;td <hi>data-xpr="2 * Math.PI * cell(1,1)"</hi>&gt;&lt;/td&gt;

	&lt;td&gt;Area&lt;/td&gt;
	&lt;td <hi>data-xpr="Math.PI * cell(1,1)**2"</hi>&gt;&lt;/td&gt;
</pre>

<p>If you reload the HTML file, the calculated cells should now carry values:</p>

<table id="sheet-5" class="spreadsheet" labels="generate,both">
<tbody><tr>
	<th colspan="2">Circle</th>
</tr><tr>
	<td>Radius?</td>
	<td>1</td>
</tr><tr>
	<td>Diameter</td>
	<td data-xpr="2 * Math.PI * cell(1,1)"></td>
</tr><tr>
	<td>Area</td>
	<td data-xpr="Math.PI * cell(1,1) ** 2"></td>
</tr></tbody>
</table>

<p>Besides JavaScript functions, <tt>spreadsheet-core.js</tt> has many built-in functions that you can use in expressions. See the reference section for details.</p>

<!--h3--></div>

<h3 cbc>Step 6 - Data Input</h3><div>

<p>At this point, our calculator spreadsheet is pretty much static. But we will change that by decorating the radius value cell with a <tt>contenteditable</tt> attribute:</p>

<figcaption class="listing">Making the radius editable</figcaption>
<pre>
&lt;tr&gt;
	&lt;td&gt;Radius?&lt;/td&gt;
	&lt;td <hi>contenteditable</hi>&gt;2&lt;/td&gt;
&lt;/tr&gt;
</pre>

<p>This makes it a data input cell.</p>

<p>Now set the keyboard focus on the radius input cell and change the value. Then type <tt>tab</tt> or click outside the cell. When the cell looses focus, the expressions will be recomputed.</p>

<table id="sheet-6" class="spreadsheet" labels="generate,both">
<tbody><tr>
	<th colspan="2">Circle</th>
</tr><tr>
	<td>Radius?</td>
	<td contenteditable>2</td>
</tr><tr>
	<td>Diameter</td>
	<td data-xpr="2 * Math.PI * cell(1,1)"></td>
</tr><tr>
	<td>Area</td>
	<td data-xpr="Math.PI * cell(1,1) ** 2"></td>
</tr></tbody>
</table>

<p>That's the core of <tt>spreadsheet core</tt>.</p>

<!--h3--></div>

<h3 cbc>Step 6 - Formatting Cell Values</h3><div>

<p>An excessive amount of fractional digits makes results hard to read. To change that, we will add a <tt>data-format</tt> attribute to the calculated cells:</p>

<figcaption class="listing">Adding format expressions</figcaption>
<pre>
&lt;tr&gt;
	&lt;td&gt;Diameter&lt;/td&gt;
	&lt;td data-xpr="2 * Math.PI * cell(1,1)" <hi>data-format="value.toFixed(2)"</hi>&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
	&lt;td&gt;Area&lt;/td&gt;
	&lt;td data-xpr="Math.PI * cell(1,1) ** 2" <hi>data-format="value.toFixed(2)"</hi>&gt;&lt;/td&gt;
&lt;/tr&gt;
</pre>

<p>You might have guessed it, the <tt>data-format</tt> attribute carries ordinary JavaScript code. In this case, the variable <tt>value</tt> is used, which is provided by <tt>spreadsheet-core.js</tt> and carries the typed cell value, a <tt>Number</tt> object in this case. And a number object has a <tt>toFixed()</tt> method that provides the desired number of fractional digits:</p>

<table id="sheet-7" class="spreadsheet" labels="generate,both">
<tbody><tr>
	<th colspan="2">Circle</th>
</tr><tr>
	<td>Radius?</td>
	<td contenteditable>2</td>
</tr><tr>
	<td>Diameter</td>
	<td data-xpr="2 * Math.PI * cell(1,1)" data-format="value.toFixed(2)"></td>
</tr><tr>
	<td>Area</td>
	<td data-xpr="Math.PI * cell(1,1) ** 2" data-format="value.toFixed(2)"></td>
</tr></tbody>
</table>


<p>Now click on the radius value cell, enter a different value, and then click outside. Diameter and area values should be updated accordingly. We have a nice, working calculator spreadsheet!</p>

<!--h3--></div>

<!--h2--></div>

<h2 cbc>Data Input and Generic Spreadsheets</h2><div>

<p>A calculator spreadsheet has mostly read-only cells, only the data input cells have the attribute <tt>contenteditable</tt>. <a href="demo-2-finished">Demo 2</a> has <em>all</em> cells editable. This is what a user expects from a usual generic spreadsheet:</p>

<table id="sheet-8" class="spreadsheet" labels="generate,both">
<tbody><tr>
	<th colspan="2" contenteditable></th>
</tr><tr>
	<td contenteditable></td>
	<td contenteditable></td>
</tr><tr>
	<td contenteditable></td>
	<td contenteditable></td>
</tr><tr>
	<td contenteditable></td>
	<td contenteditable></td>
</tr></tbody>
</table>

<p>Click on the cell(0,0). The string "s$" appears, a type specifier (s) and the prefix flag ($). This indicates that the cell type is a string. Press the right-arrow key and type "Circle". You have now entered a string value into the cell, indicated by the type indicator prefix. Press the tab key. The cell looses keyboard focus, which causes the text input to be parsed and stored as a typed value in the cell. Finally, the typed value is converted with the <tt>toString()</tt> method and shown in the cell.</p>

<p>Same for the next cell. Note that the cell content is selected. This time, just type "Radius?" without pressing the right-arrow key first. This overwrites the type indicator prefix. Press tab. Again, the input is parsed, stored and and formatted. If parser does not find a type indictor prefix, the value type is guessed from the input string. First, a number is tried, which does not succeed here. Then a boolean input is tried, which also fails. Last resort is a string type, which is correct in this case.</p>

<p>In the cell(1,1) enter "n$1". "n$" is the type indicator prefix for numbers, and "1" is the value. Press tab. This time, the text is parsed, converted into a JavaScript Number object and stored internally. A formatted version "1" is then shown in the cell.</p>

<p>Then enter "Circumference" into cell (2,0) and press tab.</p>

<p>In cell(2,1) we will enter an expression. Type "=$2*Math.PI*cell(1,1)", then press tab. The type indicator prefix "=$" means that the text input is a <em>formula</em>. In contrast to values, an expression is stored in the <tt>data-xpr</tt> attribute of the cell and then evaluated. The evaluation result is then stored in the typed value of the cell. The expression references the radius value in <tt>cell(1,1)</tt> and produces a numeric result, which is stored in the cell. Then a formatted value is shown in the cell.</p>

<p>This quite exactly how a usual spreadsheet works. But here it is pure HTML with a few lines of JavaScript!</p>

<p>Experiment further, add another formula for the area for instance.</p>

<!--h2--></div>

<h2 cbc>Storing Spreadsheet Import Files to Disk</h2><div>

<p>The content of a spreadsheet table can be saved to disk for documentation purposes, or to save a state of work. The <a href="./test/spreadsheet-persistence.js"><tt>spreadsheet-persistence.js</tt></a> module provides the functionality. Using it is astonishingly simple.</p>

<p>Let's go through an example.</p>

<table id="sheet-9" class="spreadsheet" labels="generate,both">
<tr>
	<td colspan="2"><b>Theorem of Pythagoras</b></td>
</tr><tr>
	<td>Cathetus a:</td>
	<td contenteditable>3</td>
</tr><tr>
	<td>Cathetus b:</td>
	<td contenteditable>4</td>
</tr><tr>
	<td>Hypothenusis:</td>
	<td data-xpr="Math.sqrt(cell(1,1)**2+cell(2,1)**2)" data-format="value.toFixed(2)"></td>
</tr>
</table>

<p><a id="sheet-9-save"><button>Save to disk</button></a></p>

<script type="module">
import * as spreadsheetPersistence from "./test/spreadsheet-persistence-0.js" ;
spreadsheetPersistence.setupSaveLink( "sheet-9-save", "sheet-9", "sheet-9.txt", "text/plain" );
</script>

<p>This is an ordinary and functional calculator spreadsheet. Note the download button above. If you click on it, a regular download will be started. Depending on your browser settings, the file is silently stored in your downloads folder, or the browser's save-to dialog is opened.</p>

<p>When the download procedure has finished, you can open the file in a text editor.</p>

<p>To accomplish this, add the following code to your web page:</p>

<figcaption class="listing">The download code</figcaption>
<pre>
&lt;script type="module"&gt;
import * as spreadsheetPersistence from "spreadsheet-persistence.js" ;
spreadsheetPersistence.setupSaveLink( "sheet-9-save", "sheet-9", "sheet-9.txt", "text/plain" );
&lt;/script&gt;
</pre>

<p>The function <tt>setupSaveLink</tt> from the <tt>spreadsheet-persistence.js</tt> module does the trick. The function expects a reference to or the ID of an <tt>a</tt> (link) element and a reference to or the ID of the spreadsheet table. The other parameters suggest the file name and the mime type.</p>

<p>Now click on the download button. After a short while (be patient!) the browser download dialog opens (if configured so). After another short while, the file is there and can be opened in Notepad.exe or an equivalent plain text editor:</p>

<figcaption class="listing">The downloaded spreadsheet text file</figcaption>
<pre>
&lt;table id="sheet-9" class="spreadsheet" labels="both"&gt;
&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr data-row="0"&gt;
	&lt;td&gt;0&lt;/td&gt;&lt;td colspan="2" data-col="0"&gt;Theorem of Pythagoras&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;&lt;/tr&gt;&lt;tr data-row="1"&gt;
	&lt;td&gt;1&lt;/td&gt;&lt;td data-col="0"&gt;Cathetus a:&lt;/td&gt;
	&lt;td contenteditable="" data-col="1"&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;tr data-row="2"&gt;
	&lt;td&gt;2&lt;/td&gt;&lt;td data-col="0"&gt;Cathetus b:&lt;/td&gt;
	&lt;td contenteditable="" data-col="1"&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;&lt;tr data-row="3"&gt;
	&lt;td&gt;3&lt;/td&gt;&lt;td data-col="0"&gt;Hypothenusis:&lt;/td&gt;
	&lt;td data-xpr="Math.sqrt(cell(1,1)**2+cell(2,1)**2)" data-format="value.toFixed(2)" data-col="1"&gt;5.00&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
</pre>

<p>You will certainly recognize the structure. It is very similar to the circle calculator spreadsheet from above.</p>

<!--h2--></div>

<h2 cbc>Loading a Spreadsheet Import File</h2><div>

<p>Users can load stored spreadsheet import files from disk or a trusted URL.</p>

<p class="note">Attention: Loading spreadsheets from untrusted 3rd parties can be dangerous. Read the <a href="index.htm#loading-import">import security guide</a>!</p>

<p>Let's go through an example.</p>

<table id="sheet-10"></table>

<dialog id="dialog-1"><form method="dialog">
	<p id="msg">Message</p>
	<button name="ok">OK</button> <button name ="cancel">Cancel</button>
	</form></dialog>

<button id="button-10">Import</button> <input id="selector-10" type="file" accept="text/plain" />

<script type="module">
import * as spreadsheetPersistence from "./test/spreadsheet-persistence-0.js" ;
spreadsheetPersistence.setupLoadCommand ( "button-10", "selector-10", "sheet-10" );
</script>

<p>Step 1: Click on the "Choose File" button. This opens a browser open file dialog. Navigate to the downloaded "sheet-9.txt" file from above, select it and click "ok". The selected filename should show up to the right of the button.</p>

<p>Step 2: Click the "Import" button. A dialog appears:</p>

<img src="./img/fig-001.png" width="500"/>

<p>The import code has detected active content, value expressions in this case. Click OK. This will <em>delete</em> the value expressions. A similar dialog appears if format or parse expressions or script elements were found in the import file. Choosing the default action (OK) will remove them before integration into the document.</p>

<p>Script elements in the import file are always removed without consent. They are not required for spreadsheet functionality.</p>

<p>The imported spreadsheet should show up above the import buttons. While the spreadsheet does show the correct values, editing the input cells does not change the hypothenusis value &ndash; of course, the value expression has been removed.</p>

<h3>Accepting Expressions</h3><div>

<p>We know that the spreadsheet export file sheet-9.txt is safe, because we trust the source document and its origin, and no other person had access to the file. Therefore it is safe to import the file and accept expessions. So let's try it:</p>

<ol>
<li>Click the import button again</li>
<li>Click "Cancel" prevent removal or value, format and parse expressions.</li>
<li>Edit the input fields.</li>
<li>Verify that the calculated cell is updated according to the changes.</li>
</ol>

<!--h3--></div>

<p></p>

<!--h2--></div>

<p>To be continued!</p>


</main><footer id="page-footer"></footer>
<script type="module" src="/inc/page.js" ></script>
<script type="module">
"use strict";
import * as spreadsheet from "./test/spreadsheet-core-0.js";
spreadsheet.initPage();
</script>
</body></html>